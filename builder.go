package main

import (
	"fmt"
	"io"
	"text/template"
)

type StructField struct {
	Name string
	Type string
}

type StructInfo struct {
	ImportPath        string
	OutputPackageName string
	BuilderTypeName   string
	OutputTypeName    string
	Fields            []StructField
}

func (s *StructInfo) String() string {
	return fmt.Sprintf("ImportPath: %s\nOutputPackageName: %s\nBuilderTypeName: %s\nOutputTypeName: %s\nFields: %v\n", s.ImportPath, s.OutputPackageName, s.BuilderTypeName, s.OutputTypeName, s.Fields)
}

// Go template for generating a builder
const builderTemplate = `// Code generated by structbuilder. DO NOT EDIT.

package {{.OutputPackageName}}

import "{{.ImportPath}}"

type {{.BuilderTypeName}}Builder struct {
	{{- range .Fields}}
	{{.Name}} {{.Type}}
	{{- end}}
}

func New{{.BuilderTypeName}}Builder() *{{.BuilderTypeName}}Builder {
	return &{{.BuilderTypeName}}Builder{}
}{{ "\n" }}

{{- range .Fields}}
func (b *{{$.BuilderTypeName}}Builder) With{{.Name}}(value {{.Type}}) *{{$.BuilderTypeName}}Builder {
	b.{{.Name}} = value
	return b
}{{ "\n" }}
{{- end}}

func (b *{{.BuilderTypeName}}Builder) Build() *{{.OutputTypeName}} {
	return &{{.OutputTypeName}}{
		{{- range .Fields}}
		{{.Name}}: b.{{.Name}},
		{{- end}}
	}
}
`

func executeTemplate(structInfo *StructInfo, w io.Writer) error {
	tmpl, err := template.New("struct_builder").Parse(builderTemplate)
	if err != nil {
		return err
	}

	// Execute the template
	err = tmpl.Execute(w, structInfo)
	if err != nil {
		return err
	}

	return nil
}
